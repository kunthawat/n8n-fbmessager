"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplyDataContext = void 0;
const get_1 = __importDefault(require("lodash/get"));
const n8n_workflow_1 = require("n8n-workflow");
const NodeExecuteFunctions_1 = require("../NodeExecuteFunctions");
const base_execute_context_1 = require("./base-execute-context");
class SupplyDataContext extends base_execute_context_1.BaseExecuteContext {
    constructor(workflow, node, additionalData, mode, runExecutionData, runIndex, connectionInputData, inputData, connectionType, executeData, closeFunctions, abortSignal) {
        super(workflow, node, additionalData, mode, runExecutionData, runIndex, connectionInputData, inputData, executeData, abortSignal);
        this.connectionType = connectionType;
        this.closeFunctions = closeFunctions;
        this.helpers = {
            createDeferredPromise: n8n_workflow_1.createDeferredPromise,
            copyInputItems: NodeExecuteFunctions_1.copyInputItems,
            ...(0, NodeExecuteFunctions_1.getRequestHelperFunctions)(workflow, node, additionalData, runExecutionData, connectionInputData),
            ...(0, NodeExecuteFunctions_1.getSSHTunnelFunctions)(),
            ...(0, NodeExecuteFunctions_1.getFileSystemHelperFunctions)(node),
            ...(0, NodeExecuteFunctions_1.getBinaryHelperFunctions)(additionalData, workflow.id),
            ...(0, NodeExecuteFunctions_1.getCheckProcessedHelperFunctions)(workflow, node),
            assertBinaryData: (itemIndex, propertyName) => (0, NodeExecuteFunctions_1.assertBinaryData)(inputData, node, itemIndex, propertyName, 0),
            getBinaryDataBuffer: async (itemIndex, propertyName) => await (0, NodeExecuteFunctions_1.getBinaryDataBuffer)(inputData, itemIndex, propertyName, 0),
            returnJsonArray: NodeExecuteFunctions_1.returnJsonArray,
            normalizeItems: NodeExecuteFunctions_1.normalizeItems,
            constructExecutionMetaData: NodeExecuteFunctions_1.constructExecutionMetaData,
        };
        this.getNodeParameter = ((parameterName, itemIndex, fallbackValue, options) => this._getNodeParameter(parameterName, itemIndex, fallbackValue, options));
    }
    async getInputConnectionData(connectionType, itemIndex) {
        return await NodeExecuteFunctions_1.getInputConnectionData.call(this, this.workflow, this.runExecutionData, this.runIndex, this.connectionInputData, this.inputData, this.additionalData, this.executeData, this.mode, this.closeFunctions, connectionType, itemIndex, this.abortSignal);
    }
    getInputData(inputIndex = 0, connectionType = this.connectionType) {
        if (!this.inputData.hasOwnProperty(connectionType)) {
            return [];
        }
        return super.getInputItems(inputIndex, connectionType) ?? [];
    }
    addInputData(connectionType, data) {
        const nodeName = this.node.name;
        let currentNodeRunIndex = 0;
        if (this.runExecutionData.resultData.runData.hasOwnProperty(nodeName)) {
            currentNodeRunIndex = this.runExecutionData.resultData.runData[nodeName].length;
        }
        this.addExecutionDataFunctions('input', data, connectionType, nodeName, currentNodeRunIndex).catch((error) => {
            this.logger.warn(`There was a problem logging input data of node "${nodeName}": ${error.message}`);
        });
        return { index: currentNodeRunIndex };
    }
    addOutputData(connectionType, currentNodeRunIndex, data, metadata) {
        const nodeName = this.node.name;
        this.addExecutionDataFunctions('output', data, connectionType, nodeName, currentNodeRunIndex, metadata).catch((error) => {
            this.logger.warn(`There was a problem logging output data of node "${nodeName}": ${error.message}`);
        });
    }
    async addExecutionDataFunctions(type, data, connectionType, sourceNodeName, currentNodeRunIndex, metadata) {
        if (connectionType === "main") {
            throw new n8n_workflow_1.ApplicationError('Setting type is not supported for main connection', {
                extra: { type },
            });
        }
        const { additionalData, runExecutionData, runIndex: sourceNodeRunIndex, node: { name: nodeName }, } = this;
        let taskData;
        if (type === 'input') {
            taskData = {
                startTime: new Date().getTime(),
                executionTime: 0,
                executionStatus: 'running',
                source: [null],
            };
        }
        else {
            taskData = (0, get_1.default)(runExecutionData, ['resultData', 'runData', nodeName, currentNodeRunIndex], undefined);
            if (taskData === undefined) {
                return;
            }
            taskData.metadata = metadata;
        }
        taskData = taskData;
        if (data instanceof Error) {
            taskData.executionStatus = 'error';
            taskData.error = data;
        }
        else {
            if (type === 'output') {
                taskData.executionStatus = 'success';
            }
            taskData.data = {
                [connectionType]: data,
            };
        }
        if (type === 'input') {
            if (!(data instanceof Error)) {
                this.inputData[connectionType] = data;
                taskData.inputOverride = {
                    [connectionType]: data,
                };
            }
            if (!runExecutionData.resultData.runData.hasOwnProperty(nodeName)) {
                runExecutionData.resultData.runData[nodeName] = [];
            }
            runExecutionData.resultData.runData[nodeName][currentNodeRunIndex] = taskData;
            if (additionalData.sendDataToUI) {
                additionalData.sendDataToUI('nodeExecuteBefore', {
                    executionId: additionalData.executionId,
                    nodeName,
                });
            }
        }
        else {
            taskData.executionTime = new Date().getTime() - taskData.startTime;
            if (additionalData.sendDataToUI) {
                additionalData.sendDataToUI('nodeExecuteAfter', {
                    executionId: additionalData.executionId,
                    nodeName,
                    data: taskData,
                });
            }
            if ((0, get_1.default)(runExecutionData, 'executionData.metadata', undefined) === undefined) {
                runExecutionData.executionData.metadata = {};
            }
            let sourceTaskData = runExecutionData.executionData?.metadata?.[sourceNodeName];
            if (!sourceTaskData) {
                runExecutionData.executionData.metadata[sourceNodeName] = [];
                sourceTaskData = runExecutionData.executionData.metadata[sourceNodeName];
            }
            if (!sourceTaskData[sourceNodeRunIndex]) {
                sourceTaskData[sourceNodeRunIndex] = {
                    subRun: [],
                };
            }
            sourceTaskData[sourceNodeRunIndex].subRun.push({
                node: nodeName,
                runIndex: currentNodeRunIndex,
            });
        }
    }
}
exports.SupplyDataContext = SupplyDataContext;
//# sourceMappingURL=supply-data-context.js.map