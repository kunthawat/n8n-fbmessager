import type { ICredentialType, ICredentialTypeData, INodeCredentialDescription, INodeType, INodeTypeBaseDescription, INodeTypeData, INodeTypeNameVersion, IVersionedNodeType, KnownNodesAndCredentials } from 'n8n-workflow';
import type { n8n } from './Interfaces';
export type Types = {
    nodes: INodeTypeBaseDescription[];
    credentials: ICredentialType[];
};
export declare abstract class DirectoryLoader {
    readonly directory: string;
    protected readonly excludeNodes: string[];
    protected readonly includeNodes: string[];
    isLazyLoaded: boolean;
    loadedNodes: INodeTypeNameVersion[];
    nodeTypes: INodeTypeData;
    credentialTypes: ICredentialTypeData;
    known: KnownNodesAndCredentials;
    types: Types;
    readonly nodesByCredential: Record<string, string[]>;
    constructor(directory: string, excludeNodes?: string[], includeNodes?: string[]);
    abstract packageName: string;
    abstract loadAll(): Promise<void>;
    reset(): void;
    protected resolvePath(file: string): string;
    private loadClass;
    loadNodeFromFile(filePath: string): void;
    getNode(nodeType: string): import("n8n-workflow").LoadedClass<INodeType | IVersionedNodeType>;
    loadCredentialFromFile(filePath: string): void;
    getCredential(credentialType: string): import("n8n-workflow").LoadedClass<ICredentialType>;
    getCredentialsForNode(object: IVersionedNodeType | INodeType): INodeCredentialDescription[];
    getVersionedNodeTypeAll(object: IVersionedNodeType | INodeType): INodeType[];
    private getCodex;
    private addCodex;
    private addLoadOptionsMethods;
    private getIconPath;
    private fixIconPaths;
}
export declare class CustomDirectoryLoader extends DirectoryLoader {
    packageName: string;
    loadAll(): Promise<void>;
}
export declare class PackageDirectoryLoader extends DirectoryLoader {
    packageJson: n8n.PackageJson;
    packageName: string;
    loadAll(): Promise<void>;
    private inferSupportedNodes;
    private parseJSON;
    protected readJSONSync<T>(file: string): T;
    protected readJSON<T>(file: string): Promise<T>;
}
export declare class LazyPackageDirectoryLoader extends PackageDirectoryLoader {
    loadAll(): Promise<void>;
}
